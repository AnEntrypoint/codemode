#!/usr/bin/env node;
/**;
* The Gilded Griffin - Complete Tavern Dialog Tree;
* 15 NPCs with unique backstories, personalities, and reward systems;
* Features mercenaries, keys, items, quests, and hidden content;
*/;
class TavernDialogTree {;
constructor() {;
this.playerState = {;
inventory: [],;
gold: 100,;
reputation: 0,;
completedQuests: [],;
knownNPCs: [],;
flags: {},;
relationships: {};
};
this.tavernName = "The Gilded Griffin";
this.currentNPC = null;
this.dialogHistory = [];
};
// Main dialog engine;
startDialog(npcId) {;
const npcs = this.getNPCs();
const npc = npcs[npcId];
if (!npc) return "NPC not found";
this.currentNPC = npcId;
let dialog = `\n=== ${npc.name} ===\n${npc.appearance}\nLocation: ${npc.location}\n\n${npc.dialog.greeting}\n\n`;
// Add dialog options;
const options = Object.keys(npc.dialog.paths);
options.forEach((key, index) => {;
dialog += `${index + 1}. ${npc.dialog.paths[key].text}\n`;
});
// Add special conditions based on player state;
if (this.playerState.flags.knowsSecret) {;
dialog += "S. [Special] I know what you really are...\n";
};
return dialog;
};
processDialog(choice) {;
if (!this.currentNPC) return "No active dialog";
const npcs = this.getNPCs();
const npc = npcs[this.currentNPC];
const paths = Object.keys(npc.dialog.paths);
if (choice <= paths.length) {;
const pathKey = paths[choice - 1];
const path = npc.dialog.paths[pathKey];
let response = `${npc.name}: ${path.response}\n\n`;
// Check for rewards;
const reward = this.checkRewards(this.currentNPC, pathKey);
if (reward) {;
response += `REWARD: ${reward}\n\n`;
};
// Add follow-up options;
if (path.followUp) {;
response += "Follow-up options:\n";
path.followUp.forEach((option, index) => {;
response += `${index + 1}. ${option}\n`;
});
};
response += "\n0. End conversation\n";
return response;
};
return "Invalid choice.";
};
checkRewards(npcId, pathKey) {;
const npcs = this.getNPCs();
const npc = npcs[npcId];
const rewards = npc.rewards;
// Check each possible reward;
for (let rewardKey in rewards) {;
const reward = rewards[rewardKey];
if (this.meetsCondition(reward.condition)) {;
return this.giveReward(reward);
};
};
return null;
};
meetsCondition(condition) {;
// Parse conditions like "payment", "rare item", etc.;
if (condition.includes("500 gold") && this.playerState.gold >= 500) {;
this.playerState.gold -= 500;
return true;
};
if (condition.includes("100 gold") && this.playerState.gold >= 100) {;
this.playerState.gold -= 100;
return true;
};
if (condition.includes("50 gold") && this.playerState.gold >= 50) {;
this.playerState.gold -= 50;
return true;
};
if (condition.includes("rare") && this.playerState.inventory.includes("Rare Gem")) {;
return true;
};
if (condition.includes("good karma") && this.playerState.reputation >= 10) {;
return true;
};
// Simple conditions;
return !condition.includes("+") && !condition.includes("gold") && !condition.includes("rare");
};
giveReward(reward) {;
if (reward.item) {;
this.playerState.inventory.push(reward.item);
return `Received ${reward.item} - ${reward.effect}`;
};
return null;
};
};
// Export for use;
if (typeof module !== 'undefined' && module.exports) {;
module.exports = TavernDialogTree;
};
